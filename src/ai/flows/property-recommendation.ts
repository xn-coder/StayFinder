// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for recommending properties to guests based on their search criteria.
 *
 * The flow takes search criteria as input and returns a list of recommended properties.
 * It uses a prompt to generate recommendations based on location, dates, number of guests, and price range.
 *
 * @interface PropertyRecommendationInput - Defines the input schema for the property recommendation flow.
 * @interface PropertyRecommendationOutput - Defines the output schema for the property recommendation flow.
 * @function recommendProperties - The main function to trigger the property recommendation flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PropertyRecommendationInputSchema = z.object({
  location: z.string().describe('The location for the property search.'),
  checkInDate: z.string().describe('The check-in date for the property search (YYYY-MM-DD).'),
  checkOutDate: z.string().describe('The check-out date for the property search (YYYY-MM-DD).'),
  numberOfGuests: z.number().describe('The number of guests for the property search.'),
  priceRangeMin: z.number().describe('The minimum price for the property search.'),
  priceRangeMax: z.number().describe('The maximum price for the property search.'),
});

export type PropertyRecommendationInput = z.infer<typeof PropertyRecommendationInputSchema>;

const PropertyRecommendationOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      propertyId: z.string().describe('The ID of the recommended property.'),
      propertyName: z.string().describe('The name of the recommended property.'),
      propertyDescription: z.string().describe('A short description of the property.'),
      pricePerNight: z.number().describe('The price per night for the property.'),
      amenities: z.array(z.string()).describe('A list of amenities offered by the property.'),
      photoUrl: z.string().describe('URL of the property photo')
    })
  ).describe('A list of recommended properties based on the search criteria.'),
});

export type PropertyRecommendationOutput = z.infer<typeof PropertyRecommendationOutputSchema>;

export async function recommendProperties(input: PropertyRecommendationInput): Promise<PropertyRecommendationOutput> {
  return propertyRecommendationFlow(input);
}

const propertyRecommendationPrompt = ai.definePrompt({
  name: 'propertyRecommendationPrompt',
  input: {schema: PropertyRecommendationInputSchema},
  output: {schema: PropertyRecommendationOutputSchema},
  prompt: `You are an AI assistant specialized in recommending properties to guests based on their search criteria.

  Based on the following search criteria, generate a list of property recommendations. The list should include the property ID, name, a short description, price per night, a list of amenities, and a photo URL.

  Location: {{location}}
  Check-in Date: {{checkInDate}}
  Check-out Date: {{checkOutDate}}
  Number of Guests: {{numberOfGuests}}
  Price Range: {{priceRangeMin}} - {{priceRangeMax}}

  Ensure that the recommendations are relevant to the search criteria and provide a variety of options for the guest to choose from.
  Do not include any explanations or conversational text, only the JSON output.
  `,
});

const propertyRecommendationFlow = ai.defineFlow(
  {
    name: 'propertyRecommendationFlow',
    inputSchema: PropertyRecommendationInputSchema,
    outputSchema: PropertyRecommendationOutputSchema,
  },
  async input => {
    const {output} = await propertyRecommendationPrompt(input);
    return output!;
  }
);
